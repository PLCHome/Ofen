name: Build Firmware

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Repository auschecken
    - name: Checkout repository
      uses: actions/checkout@v3

    # Installiere Python und PlatformIO
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    # Extrahiere und überprüfe das Tag (Label)
    - name: Parse tag and validate
      id: parse_tag
      run: |
        if [[ "${GITHUB_REF}" =~ ^refs/tags/release[[:space:]]([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          VERSION="${BASH_REMATCH[1]}"
          echo "Valid release tag detected: $VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV
        else
          echo "Invalid tag format. Skipping release."
          exit 0
        fi

    # Update Version.h mit der neuen Version
    - name: Update Version.h
      run: |
        sed -i 's/#define VERSION ".*"/#define VERSION "'$VERSION'"/' src/Version.h

    # Baue das Projekt
    - name: Build Firmware
      run: pio run

    # Erstelle das Tar-Archiv
    - name: Create spiffs.tar
      run: |
        mkdir -p lastVersion
        tar --transform='s/^data\///' --exclude='data/config' -cf lastVersion/spiffs.tar -C data www sys

    # Verschiebe die erzeugten Dateien in lastVersion
    - name: Move build artifacts
      run: |
        cp .pio/build/*/firmware.bin lastVersion/
        cp .pio/build/*/firmware.elf lastVersion/

    # Commit und push der geänderten Version.h und Artefakte ins Repository
    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git checkout ${{ github.ref_name }}
        mkdir -p artifacts
        cp lastVersion/firmware.bin artifacts/
        cp lastVersion/firmware.elf artifacts/
        cp lastVersion/spiffs.tar artifacts/
        git add artifacts/
        git add src/Version.h
        git commit -m "Update Version.h and add build artifacts [skip ci]"
        git push origin HEAD

    # Release erstellen
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        artifacts: |
          lastVersion/firmware.bin
          lastVersion/firmware.elf
          lastVersion/spiffs.tar
        token: ${{ secrets.GITHUB_TOKEN }}
